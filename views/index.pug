extends layout

mixin basicCanvas(name)
    div(id= name, class="canvas", style="height: 100%; width: 100%")
        script(type="module").
            import { createBasicCanvas, animate } from "#{git_root_file}/javascripts/basic_canvas.js";
            const engine_data = createBasicCanvas(#{name});
            animate(engine_data);

mixin guiCanvas(name)
    div(id= name, class="canvas", style="height: 100%; width: 100%")
        script(type="module").
            import { createBasicCanvas, animate } from "#{git_root_file}/javascripts/basic_canvas.js";
            const engine_data = createBasicCanvas(#{name}, true);
            animate(engine_data);

mixin loadConfigCanvas(name, data_root, global_keyevent)
    div(id= name, class="canvas", style="height: 100%; width: 100%")
        script(type="module").
            import { createBasicCanvas, animate } from "#{git_root_file}/javascripts/basic_canvas.js";
            import { loadFirstContext, loadContext } from "#{git_root_file}/javascripts/load_context.js";
            import { onKeydown } from "#{git_root_file}/javascripts/key_parser.js";
            const engine_data = createBasicCanvas(#{name}, true);
            engine_data.container_id = "#{name}";
            loadFirstContext("#{data_root}", engine_data);
            
            $(document).keydown((e) => { onKeydown(e, engine_data, #{global_keyevent}); });
            animate(engine_data);

mixin loadConfigCanvasSingle(root_folder, name, data_root, figure_title="", frames=['frame_000001'], global_keyevent=false)
     div(class="single_canvas_container")
        div(style="height: 90%; width: 100%; margin: auto;  position: relative")
            div(id= name, class="canvas", style="height: 100%; width: 100%")
                script(type="module").
                    import { createBasicCanvas, animate } from "#{git_root_file}/javascripts/basic_canvas.js";
                    import { loadFirstContext, loadContext } from "#{git_root_file}/javascripts/load_context.js";
                    import { onKeydown } from "#{git_root_file}/javascripts/key_parser.js";
                    const engine_data = createBasicCanvas(#{name}, true);
                    let frames = "#{frames}".split(',') 
                    engine_data.container_id = "#{name}";
                    loadFirstContext("#{root_folder}", "#{data_root}", frames, engine_data);
                    $(document).keydown((e) => { onKeydown(e, engine_data, #{global_keyevent}); });
                    animate(engine_data);
            div.figure_title
                p Fig. #{figure_title}

mixin loadMarkDown(name, root_dir)
    div(id= name, class="markdown_block")
    script.
        var markdown_name = "/markdown/" + "#{root_dir}" + "/" + "#{name}" + ".md";
        $.get(markdown_name, (data) => {
            $("#" + "#{name}").html(marked.parse(data));
        })
        

block content
    // Normal-Shader
    script(id="normal-vertexshader").
        varying vec3 viewNormal;
        void main() {
            viewNormal = normal;
            vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);
            gl_PointSize = 2.5;
            gl_Position = projectionMatrix * mvPosition;
        }
    script(id="normal-fragmentshader").
        uniform vec3 color;
        varying vec3 viewNormal;
        void main() {
            gl_FragColor = vec4(viewNormal * 0.5 + 0.5, 1.0);
        }

    // Shadow-Shader
    script(id="shadow-vertexshader").
        varying float faceRatio;
        void main() {
            vec3 axis_default;
            axis_default = vec3(-1.0, 0.0, 0.0);
            faceRatio = -dot(normal, axis_default);
            vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);
            gl_PointSize = 2.5;
            gl_Position = projectionMatrix * mvPosition;
        }
    script(id="shadow-fragmentshader").
        uniform vec3 color;
        varying float faceRatio;
        void main() {
            vec3 color_base;
            color_base = vec3(0.9, 0.9, 0.9);
            gl_FragColor = vec4(color_base * (faceRatio * 0.5 + 0.5), 1.0);
        }

    // NormalColor-Shader
    script(id="normalcolor-vertexshader").
        attribute vec3 color;
        varying float faceRatio;
        varying vec3 viewColor;
        void main() {
            viewColor = color;
            vec3 axis_default;
            axis_default = vec3(0.0, 1.0, 0.0);
            faceRatio = -dot(normal, axis_default);
            vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);
            gl_PointSize = 2.5;
            gl_Position = projectionMatrix * mvPosition;
        }
    script(id="normalcolor-fragmentshader").
        varying float faceRatio;
        varying vec3 viewColor;
        void main() {
            gl_FragColor = vec4(viewColor * (faceRatio * 0.5 + 0.5), 1.0);
        }

    h3 Debug

    each conf in config
        +loadConfigCanvasSingle(git_root_file, conf['name'], conf['folder_name'], conf['title'], conf['frames'])


    //- +loadConfigCanvasSingle("open_bag", "open_bag4Cam", "OpenBag")
    //- +loadConfigCanvasSingle("move_dragon", "move_dragon4Cam", "Move Dragon Toy")
    //- +loadConfigCanvasSingle("move_dragon", "move_dragon4Cam", "Move Dragon Toy")
    //- +loadConfigCanvasSingle("scarf", "scarf4Cam", "Moving Scarf")
    //- +loadConfigCanvasSingle("move_triple", "move_triple4Cam", "Moving YCB object")
    //- //+loadConfigCanvasSingle("hammer", "hammer4Cam", "Using Hammer")
    //- +loadConfigCanvasSingle("mario", "mario4Cam", "Mario")
    //- +loadConfigCanvasSingle("mario_v2", "mario_v24Cam", "Mario_v2")
    //- +loadConfigCanvasSingle("mario_v2_v01", "mario_v24Cam_v01", "Mario_v2_v01")
    //+loadConfigCanvasSingle("previous", "pick_two4Cam_second", "result of Calibration")
    //+loadConfigCanvasSingle("debug", "Calibration4Cam", "result of Calibration")
    //+loadConfigCanvasSingle("raw_data", "Calibration", "Raw data for Calibration")
    // +loadConfigCanvasSingle("debug", "Box_rot4Cam", "Topological change in box down pose (Version 2)")
    // +loadMarkDown("progress", "star")
    // +loadConfigCanvasSingle("canvas_spot", "Spot4Cam", "Fix bugs")
    // +loadConfigCanvasSingle("canvas_ur5e", "Ur5e4Cam", "Result")
    // +loadConfigCanvasSingle("canvas_box_up", "Box_up4Cam", "Topological change in box up pose")
    // +loadConfigCanvasSingle("canvas_box_down", "Box_down4Cam", "Topological change in box down pose")
    // +loadConfigCanvasSingle("canvas_box_down_2", "Box_down_24Cam", "Topological change in box down pose (Version 2)")
    // +loadMarkDown("issue", "star")
    // +loadMarkDown("plan", "star")

mixin addToc(md_name_list, root_dir)
    #toc
        script(src=`${git_root_file}/javascripts/markdown_toc.js`)
        script.
            const markdown_toc = new MarkdownToc(3, "#{md_name_list}", "#{root_dir}");
            $("#toc").html(marked.parse(markdown_toc.getToc()));

block sidebar
    .sidenav
        +addToc(["progress", "issue", "plan"], "star")